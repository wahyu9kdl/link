{"version":3,"sources":["utils.coffee","typeahead.coffee","utils.js","typeahead.js","app.coffee","app.js"],"names":["getIconForOs","getOs","getTagClass","injectCss","isYaml","isYamlOrJson","splitThenAdd","stripQuotes","getEngine","getTypeIcon","setDefaults","suggestionFn","css","el","type","trim","indexOf","document","getElementById","parentNode","removeChild","createElement","id","rel","href","innerHTML","head","appendChild","platform","navigator","toUpperCase","str","test","replace","val","cls","add","split","concat","join","includes","links","map","i","Bloodhound","datumTokenizer","obj","tokenizers","whitespace","name","tags","url","queryTokenizer","local","identify","typeClass","angular","module","constant","filter","input","slice","arr","factory","$http","$q","$rootScope","$filter","combineObjects","getData","getObjWithLinks","reduceAllObj","response","data","config","jsyaml","load","_url","Boolean","Object","hasOwnProperty","console","error","prevArr","curObj","link","_source","window","btoa","objArray","push","reduce","promises","settings","length","get","then","err","reject","all","directive","restrict","scope","attrs","dataset","options","hint","highlight","minLength","source","limit","$root","templates","suggestion","display","$","$watch","nVal","oVal","loadedLinks","typeahead","bind","e","target","open","focus","term","trigger","$localStorage","storageDefault","urls","openFile","openPage","cache","reset","$reset","storage","$default","controller","$scope","Settings","sourcesUrl","status","res","sources","addSource","path","applyStyle","style","clear","defaults","destroy","forEach","itags","tag","getClass","$routeParams","engine","triggerChange","change","searchResults","search","$routeProvider","when","templateUrl","otherwise","redirectTo","run","CacheFactory","LinksLoader","maxAge","cacheFlushInterval","deleteOnExpire","storageMode","log"],"mappings":"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","file":"index.min.js","sourcesContent":["injectCss = (css) ->\n  elId = 'inject-css'\n  type = undefined\n  if typeof css == 'string'\n    css = css.trim()\n  else\n    return false\n\n  if css.indexOf('/') == 0 or css.indexOf('http:') == 0 or css.indexOf('https:') == 0\n    type = 'link'\n  else\n    type = 'style'\n\n  el = document.getElementById(elId)\n  el.parentNode.removeChild el if el?\n  el = document.createElement type\n\n  el.type = 'text/css'\n  el.id = elId\n\n  if type == 'link'\n    el.rel = 'stylesheet'\n    el.href = css\n  else\n    el.innerHTML = css\n  document.head.appendChild el\n  el\n\ngetOs = ->\n  platform = navigator.platform.toUpperCase()\n  if platform.indexOf('MAC') > -1\n    return 'mac'\n  if platform.indexOf('WIN') > -1\n    return 'windows'\n  if platform.indexOf('LINUX') > -1\n    return 'linux'\n  'windows'\n\nisYamlOrJson = (str) ->\n  /\\.(ya?ml|json)$/.test str\n\nisYaml = (str) ->\n  /\\.(ya?ml)$/.test str\n\nstripQuotes = (str) ->\n  str.replace /^\"(.*)\"$/, '$1'\n\ngetTagClass = (val) ->\n  cls = 1\n  cls = 10 if val > 10\n  cls = 25 if val > 25\n  cls = 50 if val > 50\n  cls = 100 if val > 100\n  'tag-' + cls\n\nsplitThenAdd = (val, add) ->\n  val.split('\\n').concat(add).join('\\n')\n\ngetIconForOs = (str) ->\n  return 'fa-apple' if str.includes 'mac'\n  return 'fa-windows' if str.includes 'windows'\n  return 'fa-linux' if str.includes 'linux'\n  return ''\n","setDefaults = (links) ->\n  links.map (i) ->\n    i.type = 'page' if typeof i.type == 'undefined'\n    i\n\ngetEngine = (links) ->\n  links = setDefaults(links)\n  new Bloodhound\n    datumTokenizer: (obj) ->\n      tokens = []\n      tokens = tokens\n        .concat Bloodhound.tokenizers.whitespace(obj.name.replace(/[\\(\\)]/g, ''))\n        .concat obj.tags.map((i) -> '#' + i)\n        .concat ':' + obj.type\n        .concat obj.url\n      tokens\n    queryTokenizer: Bloodhound.tokenizers.whitespace\n    local: links\n    identify: (obj) -> obj.name\n\ngetTypeIcon = (type) ->\n  typeClass = ''\n  switch type\n    when 'file' then typeClass = 'fa-download'\n    when 'bookmark' then typeClass = 'fa-bookmark'\n    else typeClass = 'fa-external-link-square'\n  typeClass\n\nsuggestionFn = (obj) ->\n  tags = obj.tags.map((i) -> '#' + i).join(' ')\n  \"\"\"\n  <div><div class=\"ta-obj\">\n    <div class=\"ta-row\">\n      <span class=\"name\">#{obj.name}</span>\n      <span class=\"type\"><i class=\"fa #{getTypeIcon(obj.type)}\"></i></span>\n      <span class=\"tags\">#{tags}</span>\n    </div>\n    <div class=\"ta-row\">\n      <span class=\"url\">#{obj._url}</span>\n    </div>\n  </div></div>\n  \"\"\"\n","var getIconForOs, getOs, getTagClass, injectCss, isYaml, isYamlOrJson, splitThenAdd, stripQuotes;\n\ninjectCss = function(css) {\n  var el, elId, type;\n  elId = 'inject-css';\n  type = void 0;\n  if (typeof css === 'string') {\n    css = css.trim();\n  } else {\n    return false;\n  }\n  if (css.indexOf('/') === 0 || css.indexOf('http:') === 0 || css.indexOf('https:') === 0) {\n    type = 'link';\n  } else {\n    type = 'style';\n  }\n  el = document.getElementById(elId);\n  if (el != null) {\n    el.parentNode.removeChild(el);\n  }\n  el = document.createElement(type);\n  el.type = 'text/css';\n  el.id = elId;\n  if (type === 'link') {\n    el.rel = 'stylesheet';\n    el.href = css;\n  } else {\n    el.innerHTML = css;\n  }\n  document.head.appendChild(el);\n  return el;\n};\n\ngetOs = function() {\n  var platform;\n  platform = navigator.platform.toUpperCase();\n  if (platform.indexOf('MAC') > -1) {\n    return 'mac';\n  }\n  if (platform.indexOf('WIN') > -1) {\n    return 'windows';\n  }\n  if (platform.indexOf('LINUX') > -1) {\n    return 'linux';\n  }\n  return 'windows';\n};\n\nisYamlOrJson = function(str) {\n  return /\\.(ya?ml|json)$/.test(str);\n};\n\nisYaml = function(str) {\n  return /\\.(ya?ml)$/.test(str);\n};\n\nstripQuotes = function(str) {\n  return str.replace(/^\"(.*)\"$/, '$1');\n};\n\ngetTagClass = function(val) {\n  var cls;\n  cls = 1;\n  if (val > 10) {\n    cls = 10;\n  }\n  if (val > 25) {\n    cls = 25;\n  }\n  if (val > 50) {\n    cls = 50;\n  }\n  if (val > 100) {\n    cls = 100;\n  }\n  return 'tag-' + cls;\n};\n\nsplitThenAdd = function(val, add) {\n  return val.split('\\n').concat(add).join('\\n');\n};\n\ngetIconForOs = function(str) {\n  if (str.includes('mac')) {\n    return 'fa-apple';\n  }\n  if (str.includes('windows')) {\n    return 'fa-windows';\n  }\n  if (str.includes('linux')) {\n    return 'fa-linux';\n  }\n  return '';\n};\n","var getEngine, getTypeIcon, setDefaults, suggestionFn;\n\nsetDefaults = function(links) {\n  return links.map(function(i) {\n    if (typeof i.type === 'undefined') {\n      i.type = 'page';\n    }\n    return i;\n  });\n};\n\ngetEngine = function(links) {\n  links = setDefaults(links);\n  return new Bloodhound({\n    datumTokenizer: function(obj) {\n      var tokens;\n      tokens = [];\n      tokens = tokens.concat(Bloodhound.tokenizers.whitespace(obj.name.replace(/[\\(\\)]/g, ''))).concat(obj.tags.map(function(i) {\n        return '#' + i;\n      })).concat(':' + obj.type).concat(obj.url);\n      return tokens;\n    },\n    queryTokenizer: Bloodhound.tokenizers.whitespace,\n    local: links,\n    identify: function(obj) {\n      return obj.name;\n    }\n  });\n};\n\ngetTypeIcon = function(type) {\n  var typeClass;\n  typeClass = '';\n  switch (type) {\n    case 'file':\n      typeClass = 'fa-download';\n      break;\n    case 'bookmark':\n      typeClass = 'fa-bookmark';\n      break;\n    default:\n      typeClass = 'fa-external-link-square';\n  }\n  return typeClass;\n};\n\nsuggestionFn = function(obj) {\n  var tags;\n  tags = obj.tags.map(function(i) {\n    return '#' + i;\n  }).join(' ');\n  return `<div><div class=\"ta-obj\">\n  <div class=\"ta-row\">\n    <span class=\"name\">${obj.name}</span>\n    <span class=\"type\"><i class=\"fa ${getTypeIcon(obj.type)}\"></i></span>\n    <span class=\"tags\">${tags}</span>\n  </div>\n  <div class=\"ta-row\">\n    <span class=\"url\">${obj._url}</span>\n  </div>\n</div></div>`;\n};\n","angular\n  .module 'App', ['ngRoute', 'ngStorage', 'angular-cache']\n\n  .constant 'sourcesUrl', 'https://api.github.com/repos/links-js/db/contents/'\n\n  .filter 'tagReplace', -> (input) -> if input then input.replace(/tag:/gi, '#') else ''\n  .filter 'noReferrer', -> (input) -> 'https://href.li/?' + input\n  .filter 'filename', -> (input) -> input.split('/').slice(-1)[0]\n  .filter 'getFaviconUrl', -> (input) -> 'https://www.google.com/s2/favicons?domain_url=' + input\n  .filter 'getLastItem', -> (arr) -> arr.slice(-1)[0]\n  .filter 'hasYamlOrJson', -> (obj) -> isYamlOrJson(obj.name)\n  .filter 'getIconForOs', -> getIconForOs\n\n  .factory 'LinksLoader', ($http, $q, $rootScope, $filter) ->\n    getData = (response) ->\n      url = response.config.url\n      data = null\n      data = if isYaml(url) then data = jsyaml.load(response.data) else data = response.data\n      # Add _url to all response data object\n      data._url = url\n      data\n\n    getObjWithLinks = (obj) ->\n      if Boolean(obj) and (obj instanceof Object)\n        if obj.hasOwnProperty 'links'\n          return true\n      console.error 'Incorrect object:', obj\n      return false\n\n    reduceAllObj = (prevArr, curObj) ->\n      # _source for identify - base64\n      links = curObj.links.map (link) ->\n        link._url = curObj._url\n        link._source = window.btoa(curObj._url)\n        link\n      prevArr.concat(links)\n\n    combineObjects = (objArray) ->\n      # discard everything else that doesn't have 'links' property then combine all files\n      objArray.push objArray.filter(getObjWithLinks).reduce(reduceAllObj, [])\n      objArray\n\n    {\n      load: ->\n        urls = $rootScope.settings.url.split('\\n').filter((url) -> url.length > 0)\n        promises = urls.map (url) ->\n          $http.get(url).then getData, (err) ->\n            console.error 'HTTP error:', err\n            $q.reject err\n        $q.all(promises).then(combineObjects).then $filter('getLastItem')\n    }\n\n  .directive 'myTypeahead', ->\n    {\n      restrict: 'C'\n      scope: true\n      link: (scope, el, attrs) ->\n        options =\n          hint: false\n          highlight: true\n          minLength: 1\n        dataset =\n          name: 'links'\n          source: null\n          limit: scope.$root.settings.limit\n          templates: suggestion: suggestionFn\n          display: 'name'\n        input = $(el[0])\n        engine = null\n        scope.$root.$watch 'loadedLinks', (nVal, oVal) ->\n          if nVal\n            dataset.source = getEngine(scope.$root.loadedLinks)\n            input.typeahead options, dataset\n            input.bind 'typeahead:select', (e, obj) ->\n              target = scope.$root.settings[if obj.type == 'page' then 'openPage' else 'openFile']\n              target = stripQuotes(target)\n              target = if target == 'new' then '_blank' else '_self'\n              window.open obj.url, target\n          input.focus()\n        scope.$watch 'term', -> input.val(scope.term).trigger('input').focus()\n    }\n\n  .factory 'Settings', ($localStorage) ->\n    urls = [\n      '/db/db-global.yml'\n      '/db/db-' + getOs() + '.yml'\n    ].join('\\n')\n\n    storageDefault =\n      url: urls\n      openFile: 'current'\n      openPage: 'new'\n      cache: true\n      limit: 10\n\n    {\n      reset: -> $localStorage.$reset storageDefault\n      storage: $localStorage.$default(storageDefault)\n    }\n\n  .controller 'SettingsCtrl', ($scope, $rootScope, Settings, $http, sourcesUrl, $filter) ->\n    status = -> $scope.status = 'Please reload page'\n\n    $http.get(sourcesUrl).then (res) ->\n      $scope.sources = res.data.filter $filter('hasYamlOrJson')\n\n    $scope.addSource = (source) ->\n      $rootScope.settings.url = splitThenAdd($rootScope.settings.url, \"/db/#{source.path}\")\n\n    $scope.applyStyle = -> injectCss $rootScope.settings.css; return\n\n    $scope.style = (name) ->\n      $rootScope.settings.css = \"/styles/#{name}.css\"\n      $scope.applyStyle()\n\n    $scope.reset = ->\n      Settings.reset()\n      status()\n\n    $scope.clear = ->\n      $http.defaults.cache.destroy()\n      status()\n\n  .controller 'TagsCtrl', ($scope, $rootScope) ->\n    tags = {}\n    $rootScope.loadedLinks\n      .map (i) -> i.tags\n      .forEach (itags) ->\n        itags.forEach (tag) ->\n          tags[tag] = if tags.hasOwnProperty(tag) then tags[tag] + 1 else 1\n\n    $scope.getClass = getTagClass\n    $scope.tags = tags\n\n  .controller 'TypeCtrl', ($scope, $routeParams, $filter) ->\n    $scope.term = $filter('tagReplace')($routeParams.term)\n\n  .controller 'ListCtrl', ($scope, $routeParams, $filter) ->\n    engine = null\n\n    triggerChange = -> $scope.change() if $scope.term.length > 0\n\n    $scope.$root.$watch 'loadedLinks', (nVal, oVal) ->\n      engine = getEngine($scope.$root.loadedLinks)\n      triggerChange()\n\n    $scope.searchResults = []\n\n    $scope.change = -> engine.search($scope.term.trim(), (links) -> $scope.searchResults = links) if engine\n\n    $scope.term = $filter('tagReplace')($routeParams.term)\n    triggerChange()\n\n  .config ($routeProvider) ->\n    $routeProvider\n      .when '/type/:term?', templateUrl: 'typeahead.html', controller: 'TypeCtrl'\n      .when '/list/:term?', templateUrl: 'list.html', controller: 'ListCtrl'\n      .when '/tags', templateUrl: 'tags.html'\n      .otherwise redirectTo: '/type'\n\n  .run ($http, $rootScope, Settings, CacheFactory, LinksLoader) ->\n    $rootScope.settings = Settings.storage\n\n    injectCss $rootScope.settings.css if $rootScope.settings.css != null\n\n    if $rootScope.settings.cache == true\n      $http.defaults.cache = CacheFactory 'defaultCache',\n        maxAge: 15 * 60 * 1000\n        cacheFlushInterval: 60 * 60 * 1000\n        deleteOnExpire: 'aggressive'\n        storageMode: 'localStorage'\n\n    LinksLoader.load().then (links) ->\n      console.log 'Links are loaded:', links.length\n      $rootScope.loadedLinks = links\n","angular.module('App', ['ngRoute', 'ngStorage', 'angular-cache']).constant('sourcesUrl', 'https://api.github.com/repos/links-js/db/contents/').filter('tagReplace', function() {\n  return function(input) {\n    if (input) {\n      return input.replace(/tag:/gi, '#');\n    } else {\n      return '';\n    }\n  };\n}).filter('noReferrer', function() {\n  return function(input) {\n    return 'https://href.li/?' + input;\n  };\n}).filter('filename', function() {\n  return function(input) {\n    return input.split('/').slice(-1)[0];\n  };\n}).filter('getFaviconUrl', function() {\n  return function(input) {\n    return 'https://www.google.com/s2/favicons?domain_url=' + input;\n  };\n}).filter('getLastItem', function() {\n  return function(arr) {\n    return arr.slice(-1)[0];\n  };\n}).filter('hasYamlOrJson', function() {\n  return function(obj) {\n    return isYamlOrJson(obj.name);\n  };\n}).filter('getIconForOs', function() {\n  return getIconForOs;\n}).factory('LinksLoader', function($http, $q, $rootScope, $filter) {\n  var combineObjects, getData, getObjWithLinks, reduceAllObj;\n  getData = function(response) {\n    var data, url;\n    url = response.config.url;\n    data = null;\n    data = isYaml(url) ? data = jsyaml.load(response.data) : data = response.data;\n    // Add _url to all response data object\n    data._url = url;\n    return data;\n  };\n  getObjWithLinks = function(obj) {\n    if (Boolean(obj) && (obj instanceof Object)) {\n      if (obj.hasOwnProperty('links')) {\n        return true;\n      }\n    }\n    console.error('Incorrect object:', obj);\n    return false;\n  };\n  reduceAllObj = function(prevArr, curObj) {\n    var links;\n    // _source for identify - base64\n    links = curObj.links.map(function(link) {\n      link._url = curObj._url;\n      link._source = window.btoa(curObj._url);\n      return link;\n    });\n    return prevArr.concat(links);\n  };\n  combineObjects = function(objArray) {\n    // discard everything else that doesn't have 'links' property then combine all files\n    objArray.push(objArray.filter(getObjWithLinks).reduce(reduceAllObj, []));\n    return objArray;\n  };\n  return {\n    load: function() {\n      var promises, urls;\n      urls = $rootScope.settings.url.split('\\n').filter(function(url) {\n        return url.length > 0;\n      });\n      promises = urls.map(function(url) {\n        return $http.get(url).then(getData, function(err) {\n          console.error('HTTP error:', err);\n          return $q.reject(err);\n        });\n      });\n      return $q.all(promises).then(combineObjects).then($filter('getLastItem'));\n    }\n  };\n}).directive('myTypeahead', function() {\n  return {\n    restrict: 'C',\n    scope: true,\n    link: function(scope, el, attrs) {\n      var dataset, engine, input, options;\n      options = {\n        hint: false,\n        highlight: true,\n        minLength: 1\n      };\n      dataset = {\n        name: 'links',\n        source: null,\n        limit: scope.$root.settings.limit,\n        templates: {\n          suggestion: suggestionFn\n        },\n        display: 'name'\n      };\n      input = $(el[0]);\n      engine = null;\n      scope.$root.$watch('loadedLinks', function(nVal, oVal) {\n        if (nVal) {\n          dataset.source = getEngine(scope.$root.loadedLinks);\n          input.typeahead(options, dataset);\n          input.bind('typeahead:select', function(e, obj) {\n            var target;\n            target = scope.$root.settings[obj.type === 'page' ? 'openPage' : 'openFile'];\n            target = stripQuotes(target);\n            target = target === 'new' ? '_blank' : '_self';\n            return window.open(obj.url, target);\n          });\n        }\n        return input.focus();\n      });\n      return scope.$watch('term', function() {\n        return input.val(scope.term).trigger('input').focus();\n      });\n    }\n  };\n}).factory('Settings', function($localStorage) {\n  var storageDefault, urls;\n  urls = ['/db/db-global.yml', '/db/db-' + getOs() + '.yml'].join('\\n');\n  storageDefault = {\n    url: urls,\n    openFile: 'current',\n    openPage: 'new',\n    cache: true,\n    limit: 10\n  };\n  return {\n    reset: function() {\n      return $localStorage.$reset(storageDefault);\n    },\n    storage: $localStorage.$default(storageDefault)\n  };\n}).controller('SettingsCtrl', function($scope, $rootScope, Settings, $http, sourcesUrl, $filter) {\n  var status;\n  status = function() {\n    return $scope.status = 'Please reload page';\n  };\n  $http.get(sourcesUrl).then(function(res) {\n    return $scope.sources = res.data.filter($filter('hasYamlOrJson'));\n  });\n  $scope.addSource = function(source) {\n    return $rootScope.settings.url = splitThenAdd($rootScope.settings.url, `/db/${source.path}`);\n  };\n  $scope.applyStyle = function() {\n    injectCss($rootScope.settings.css);\n  };\n  $scope.style = function(name) {\n    $rootScope.settings.css = `/styles/${name}.css`;\n    return $scope.applyStyle();\n  };\n  $scope.reset = function() {\n    Settings.reset();\n    return status();\n  };\n  return $scope.clear = function() {\n    $http.defaults.cache.destroy();\n    return status();\n  };\n}).controller('TagsCtrl', function($scope, $rootScope) {\n  var tags;\n  tags = {};\n  $rootScope.loadedLinks.map(function(i) {\n    return i.tags;\n  }).forEach(function(itags) {\n    return itags.forEach(function(tag) {\n      return tags[tag] = tags.hasOwnProperty(tag) ? tags[tag] + 1 : 1;\n    });\n  });\n  $scope.getClass = getTagClass;\n  return $scope.tags = tags;\n}).controller('TypeCtrl', function($scope, $routeParams, $filter) {\n  return $scope.term = $filter('tagReplace')($routeParams.term);\n}).controller('ListCtrl', function($scope, $routeParams, $filter) {\n  var engine, triggerChange;\n  engine = null;\n  triggerChange = function() {\n    if ($scope.term.length > 0) {\n      return $scope.change();\n    }\n  };\n  $scope.$root.$watch('loadedLinks', function(nVal, oVal) {\n    engine = getEngine($scope.$root.loadedLinks);\n    return triggerChange();\n  });\n  $scope.searchResults = [];\n  $scope.change = function() {\n    if (engine) {\n      return engine.search($scope.term.trim(), function(links) {\n        return $scope.searchResults = links;\n      });\n    }\n  };\n  $scope.term = $filter('tagReplace')($routeParams.term);\n  return triggerChange();\n}).config(function($routeProvider) {\n  return $routeProvider.when('/type/:term?', {\n    templateUrl: 'typeahead.html',\n    controller: 'TypeCtrl'\n  }).when('/list/:term?', {\n    templateUrl: 'list.html',\n    controller: 'ListCtrl'\n  }).when('/tags', {\n    templateUrl: 'tags.html'\n  }).otherwise({\n    redirectTo: '/type'\n  });\n}).run(function($http, $rootScope, Settings, CacheFactory, LinksLoader) {\n  $rootScope.settings = Settings.storage;\n  if ($rootScope.settings.css !== null) {\n    injectCss($rootScope.settings.css);\n  }\n  if ($rootScope.settings.cache === true) {\n    $http.defaults.cache = CacheFactory('defaultCache', {\n      maxAge: 15 * 60 * 1000,\n      cacheFlushInterval: 60 * 60 * 1000,\n      deleteOnExpire: 'aggressive',\n      storageMode: 'localStorage'\n    });\n  }\n  return LinksLoader.load().then(function(links) {\n    console.log('Links are loaded:', links.length);\n    return $rootScope.loadedLinks = links;\n  });\n});\n"]}